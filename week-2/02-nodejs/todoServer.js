/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs')
const { v4: uuidv4 } = require('uuid')


const app = express();
app.use(express.json());

let todos = [];
try {
  const data = fs.readFileSync('todos.json', 'utf-8');
  todos = JSON.parse(data);
} catch (err) {
  console.error('Error reading file:', err);
}

// Retrieve all todo items
app.get('/todos', (req, res) => {
  return res.status(200).json({ 'ToDo List': todos })
})

// Retrieve a specific todo item by ID
app.get('/todos/:id', (req, res) => {
  const id = req.params.id
  const todo = todos.find((ele) => {
    if (id === ele['_id']) return ele
  })

  if (!todo) return res.status(404).json({ msg: "Task not found" })

  return res.status(200).json({
    "task": todo
  })
})

// Create a new todo item
app.post('/todos', (req, res) => {
  const { title, description } = req.body;
  const newTodo = {
    "_id": uuidv4(),
    title,
    "completed": false,
    description
  }

  todos.push(newTodo)
  const todosJSON = JSON.stringify(todos, null, 6);
  fs.writeFileSync('todos.json', todosJSON)
  return res.status(201).json({
    msg: "Created new Task Successfully",
    "new Task": newTodo
  })
})


// Update an existing todo item by ID
app.put('/todos/:id', (req, res) => {
  const { title, description } = req.body;
  const id = req.params.id
  const findTask = todos.find(ele => ele._id === id)
  if (!findTask) {
    return res.status(404).json({
      msg: "Task not Found"
    })
  }
  if (title && description) {
    todos = todos.map((ele) => {
      if (id === ele._id) {
        return {
          ...ele,
          title,
          description
        }
      }
      else return ele
    })
  } else if (title) {
    todos = todos.map((ele) => {
      if (id === ele._id) {
        return {
          ...ele,
          title,
        }
      }
      else return ele
    })
  } else if (description) {
    todos = todos.map((ele) => {
      if (id === ele._id) {
        return {
          ...ele,
          description
        }
      }
      return ele
    })
  }
  const todosJSON = JSON.stringify(todos, null, 4);
  fs.writeFileSync('todos.json', todosJSON)
  const Task = todos.find(ele => {
    if (id === ele['_id']) return ele
  })
  res.status(200).json({
    msg: "Updated the task",
    Task
  })
})

// Delete a todo item by ID
app.delete('/todos/:id', (req, res) => {
  const id = req.params.id
  const findTask = todos.find(ele => ele._id === id)
  if (!findTask) {
    return res.status(404).json({
      msg: "Task Not Found"
    })
  }
  todos = todos.filter(ele => ele._id !== id)
  const todosJSON = JSON.stringify(todos, null, 4)
  fs.writeFileSync('todos.json', todosJSON)
  return res.status(200).json({
    msg: 'Task Deleted Successfully'
  })
})

app.listen(3000, () => {
  console.log("Server is running in PORT 3000")
})


module.exports = app;